---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type | title}})

{{ .Description | trimspace }}

## Example Usage

### Basic Usage

```terraform
# Get all available resource types
data "proactnaming_resource_types" "all" {}

# Output the list for reference
output "available_resource_types" {
  description = "All available Azure resource types"
  value = [for rt in data.proactnaming_resource_types.all.resource_types : {
    short_name = rt.short_name
    resource   = rt.resource
    enabled    = rt.enabled
  }]
}
```

### Filtering and Validation

```terraform
data "proactnaming_resource_types" "all" {}

# Create a list of enabled resource types
locals {
  enabled_resource_types = [
    for rt in data.proactnaming_resource_types.all.resource_types : 
    rt.short_name if rt.enabled
  ]
  
  # Check if specific resource types are available
  has_resource_group = contains(local.enabled_resource_types, "rg")
  has_storage_account = contains(local.enabled_resource_types, "st")
  has_virtual_machine = contains(local.enabled_resource_types, "vm")
}

# Conditionally create resources based on availability
resource "proactnaming_generate_name" "rg" {
  count = local.has_resource_group ? 1 : 0
  
  organization  = "myorg"
  resource_type = "rg"
  application   = "webapp"
  function      = "core"
  instance      = "001"
  location      = "euw"
  environment   = "dev"
}
```

### Dynamic Resource Creation

```terraform
data "proactnaming_resource_types" "all" {}

# Define the resource types we want to create names for
locals {
  required_resource_types = ["rg", "st", "vm", "app"]
  
  # Filter to only enabled and available types
  available_types = [
    for required in local.required_resource_types : required
    if contains([
      for rt in data.proactnaming_resource_types.all.resource_types : rt.short_name
      if rt.enabled
    ], required)
  ]
}

# Generate names for all available required types
resource "proactnaming_generate_name" "infrastructure" {
  for_each = toset(local.available_types)
  
  organization  = "myorg"
  resource_type = each.value
  application   = "webapp"
  function      = "core"
  instance      = "001"
  location      = "euw"
  environment   = "dev"
}

output "generated_names" {
  description = "All generated infrastructure names"
  value = {
    for k, v in proactnaming_generate_name.infrastructure : k => v.resource_name
  }
}
```

{{ .SchemaMarkdown | trimspace }}
